//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian

#ifndef MyAnalysisManager_h
#define MyAnalysisManager_h 1

#include "G4RunManager.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"
#include "G4Event.hh"
#include <iomanip>
#include "g4root.hh"

#include "TROOT.h"
#include "TFile.h"
#include "TTree.h"
#include "TSystem.h"
#include "TNtuple.h"
#include "TH1.h"
#include "TH2.h"

class SimEvent;
class GarEvent;
class MyGunAction;
class MyAnalysisManager
{
    public:
      static MyAnalysisManager *GetInstance()
      {
            if (MyAnalysisManager::fInstance == NULL)
                  MyAnalysisManager::fInstance = new MyAnalysisManager();
            return MyAnalysisManager::fInstance;
      }

      MyAnalysisManager();
      ~MyAnalysisManager();

      void BeginOfEventAction(const G4Event *evt);
      void EndOfEventAction(const G4Event *evt);

      void BeginOfRunAction();
      void EndOfRunAction();

	  void DoReserve();
	  
      SimEvent *GetSimEvent() { return fEvent; }
      TH2F *GetHistorgram() { return hpxy; }
      TH1F *Get1Historgram() { return hSignal; }

    private:
      G4String fFileName;

      FILE *outfile;
      TFile *fRootFp;
      TTree *fTree;
      TNtuple *ntuple;
      SimEvent *fEvent;
      TH2F *hpxy;
      TH1F *hSignal;

      static MyAnalysisManager *fInstance;

    public:
      inline void SetFileName(G4String name) { fFileName = name; }
};

#endif
