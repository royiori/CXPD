//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian

#ifndef SimEvent_h
#define SimEvent_h

#include "TVector3.h"
#include "TObject.h"
#include "TMap.h"
#include "TObjString.h"
#include "Verbose.hh"
#include <map>

#include "SimTrack.h"
#include "SimDeposit.h"

class SimEvent : public TObject
{

public:
  SimEvent() { MyClear(); }
  virtual ~SimEvent() {}


  // General Functions
  //________________________________
  void SetPDGID(int pdgId) { fPDGID = pdgId; }
  void SetTrueEnergy(double energy) { fEnergy0 = energy; }
  void SetMomentumX(double px) { fPx0 = px; }
  void SetMomentumY(double py) { fPy0 = py; }
  void SetMomentumZ(double pz) { fPz0 = pz; }

  int GetPDGID() { return fPDGID; }
  double GetTrueEnergy() { return fEnergy0; }
  double GetMomentumX() { return fPx0; }
  double GetMomentumY() { return fPy0; }
  double GetMomentumZ() { return fPz0; }
  TVector3 GetMomentumDir() { return TVector3(fPx0, fPy0, fPz0); }


public:
  inline void MyClear();
  inline void MyMapClear(TMap *);

//$DataIncGlobalFunc$

  // SD Functions
  //________________________________
  // for WindowSD SD
  void AddWindowSDDeposit(Int_t tID, SimDeposit *aDep)
  {
    SimTrack *aTrack = GetWindowSDTrack(tID);

    Int_t Ndep = fWindowSDDeposits->GetSize();
    fWindowSDDeposits->Add(new TObjString(Form("%d",Ndep)), aDep);

    aTrack->addDeposit(Ndep, aDep);
  }

  SimTrack* GetWindowSDTrack(Int_t tID)
  {
    SimTrack* aTrack = (SimTrack *)fWindowSDTracks->GetValue(Form("%d",tID));

    if(aTrack==0) {
      aTrack = new SimTrack();
      aTrack->SetTrackID( tID );
      fWindowSDTracks->Add(new TObjString(Form("%d",tID)), aTrack);
    }
    return aTrack;
  }

  SimDeposit* GetWindowSDDeposit(Int_t tID)
  {
    SimDeposit* aDeposit = (SimDeposit *)fWindowSDDeposits->GetValue(Form("%d", tID));
    return aDeposit;
  }

  TMap *GetWindowSDTrackMap() {return fWindowSDTracks;}
  TMap *GetWindowSDDepositMap() {return fWindowSDDeposits;}

  void AddWindowDepEnergy(double eng) { fWindowDepTotalEnergy += eng; }
  double GetWindowDepEnergy() { return fWindowDepTotalEnergy; }
 
  //________________________________
  // for GasSD SD
  void AddGasSDDeposit(Int_t tID, SimDeposit *aDep)
  {
    SimTrack *aTrack = GetGasSDTrack(tID);

    Int_t Ndep = fGasSDDeposits->GetSize();
    fGasSDDeposits->Add(new TObjString(Form("%d",Ndep)), aDep);

    aTrack->addDeposit(Ndep, aDep);
  }

  SimTrack* GetGasSDTrack(Int_t tID)
  {
    SimTrack* aTrack = (SimTrack *)fGasSDTracks->GetValue(Form("%d",tID));

    if(aTrack==0) {
      aTrack = new SimTrack();
      aTrack->SetTrackID( tID );
      fGasSDTracks->Add(new TObjString(Form("%d",tID)), aTrack);
    }
    return aTrack;
  }

  SimDeposit* GetGasSDDeposit(Int_t tID)
  {
    SimDeposit* aDeposit = (SimDeposit *)fGasSDDeposits->GetValue(Form("%d", tID));
    return aDeposit;
  }

  TMap *GetGasSDTrackMap() {return fGasSDTracks;}
  TMap *GetGasSDDepositMap() {return fGasSDDeposits;}
  
  void AddGasDepEnergy(double eng) { fGasDepTotalEnergy += eng; }
  double GetGasDepEnergy() { return fGasDepTotalEnergy; }

private:
  // global variables
  int fPDGID;
  double fEnergy0;
  double fPx0;
  double fPy0;
  double fPz0;

//$DataIncGlobalDef$

  // SD variables
  TMap *fWindowSDTracks = NULL;
  TMap *fWindowSDDeposits = NULL;
  double fWindowDepTotalEnergy;

  TMap *fGasSDTracks = NULL;
  TMap *fGasSDDeposits = NULL;
  double fGasDepTotalEnergy;

  //________________________________
  // User defined functions
public:
  void SetPhoelecMomentumX(double px) {pepx = px;}
  void SetPhoelecMomentumY(double py) {pepy = py;}
  void SetPhoelecMomentumZ(double pz) {pepz = pz;}
  void SetEleCreatPosX(double val) {eTrackPosX = val;}
  void SetEleCreatPosY(double val) {eTrackPosY = val;}
  void SetEleCreatPosZ(double val) {eTrackPosZ = val;}
  void AddStepLength(double val) {StepLength += val;}
  
  double GetStepLength()  {return StepLength;}
  TVector3 GetPEDirection() { return TVector3(pepx, pepy, pepz); }
  TVector3 GetETrackPosition() {return TVector3(eTrackPosX, eTrackPosY, eTrackPosZ);}

private:
  double pepx;
  double pepy;
  double pepz;
  double eTrackPosX;
  double eTrackPosY;
  double eTrackPosZ;    
  double StepLength;
  //--------------------------------
  
  ClassDef(SimEvent, 1)
};

inline void SimEvent::MyClear()
{
  fPDGID = -999;
  fEnergy0 = 0.;
  fPx0 = 0.;
  fPy0 = 0.;
  fPz0 = 0.;
  fWindowDepTotalEnergy = 0;
  fGasDepTotalEnergy = 0;

  if(fWindowSDTracks == NULL)
    fWindowSDTracks = new TMap();
  else
    MyMapClear(fWindowSDTracks);

  if(fWindowSDDeposits == NULL)
    fWindowSDDeposits = new TMap();
  else
    MyMapClear(fWindowSDDeposits);

  if(fGasSDTracks == NULL)
    fGasSDTracks = new TMap();
  else
    MyMapClear(fGasSDTracks);

  if(fGasSDDeposits == NULL)
    fGasSDDeposits = new TMap();
  else
    MyMapClear(fGasSDDeposits);
}

inline void SimEvent::MyMapClear(TMap *mp)
{
  TIterator *it = mp->MakeIterator();
  TObject* tempObj=0;
  while((tempObj = it->Next()))
  {
    TObjString *obj = dynamic_cast<TObjString *>(tempObj);
    SimTrack* trk = dynamic_cast<SimTrack *>(mp->GetValue(obj));
    SimDeposit* dep = dynamic_cast<SimDeposit *>(mp->GetValue(obj));
    if(trk!=NULL) delete trk;
    if(dep!=NULL) delete dep;
  }    
  mp->Clear();
}
#endif
