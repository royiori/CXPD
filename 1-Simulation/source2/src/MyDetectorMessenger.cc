//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian


#include "G4UIdirectory.hh"
#include "G4UIcmdWithAString.hh"
#include "G4UIcmdWithADoubleAndUnit.hh"
#include "G4UIcmdWithoutParameter.hh"
#include "G4UIcmdWithADouble.hh"
#include "Verbose.hh"

#include "MyDetectorMessenger.hh"
#include "MyDetectorConstruction.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyDetectorMessenger::MyDetectorMessenger(MyDetectorConstruction *Det)
    : G4UImessenger(),
      fDetectorConstruction(Det)
{
  if (verbose)
    G4cout << "====>MyDetectorMessenger::MyDetectorMessenger(MyDetectorConstruction *Det)" << G4endl;

  fMyDirectory = new G4UIdirectory("/MySimulation/");
  fMyDirectory->SetGuidance("UI commands specific to this example.");

  fDetDirectory = new G4UIdirectory("/MySimulation/det/");
  fDetDirectory->SetGuidance("Detector construction control");

  fWorldMatCmd = new G4UIcmdWithAString("/MySimulation/det/setWorldMaterial", this);
  fWorldMatCmd->SetGuidance("Select Material of the World.");
  fWorldMatCmd->SetParameterName("choice", false);
  fWorldMatCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

  fWorldSizeXCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWorldX", this);
  fWorldSizeXCmd->SetUnitCategory("Length");
  fWorldSizeXCmd->SetParameterName("WorldX", false);
  fWorldSizeXCmd->SetRange("WorldX>0.");
  fWorldSizeXCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWorldSizeXCmd->SetToBeBroadcasted(false);

  fWorldSizeYCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWorldY", this);
  fWorldSizeYCmd->SetUnitCategory("Length");
  fWorldSizeYCmd->SetParameterName("WorldY", false);
  fWorldSizeYCmd->SetRange("WorldY>0.");
  fWorldSizeYCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWorldSizeYCmd->SetToBeBroadcasted(false);

  fWorldSizeZCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWorldZ", this);
  fWorldSizeZCmd->SetUnitCategory("Length");
  fWorldSizeZCmd->SetParameterName("WorldZ", false);
  fWorldSizeZCmd->SetRange("WorldZ>0.");
  fWorldSizeZCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWorldSizeZCmd->SetToBeBroadcasted(false);
  fWindowMatCmd = new G4UIcmdWithAString("/MySimulation/det/setWindowMaterial", this);
  fWindowMatCmd->SetGuidance("Select Material of the Window.");
  fWindowMatCmd->SetParameterName("choice", false);
  fWindowMatCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

  fWindowSizeXCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWindowX", this);
  fWindowSizeXCmd->SetUnitCategory("Length");
  fWindowSizeXCmd->SetParameterName("WindowX", false);
  fWindowSizeXCmd->SetRange("WindowX>0.");
  fWindowSizeXCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWindowSizeXCmd->SetToBeBroadcasted(false);

  fWindowSizeYCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWindowY", this);
  fWindowSizeYCmd->SetUnitCategory("Length");
  fWindowSizeYCmd->SetParameterName("WindowY", false);
  fWindowSizeYCmd->SetRange("WindowY>0.");
  fWindowSizeYCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWindowSizeYCmd->SetToBeBroadcasted(false);

  fWindowSizeZCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWindowZ", this);
  fWindowSizeZCmd->SetUnitCategory("Length");
  fWindowSizeZCmd->SetParameterName("WindowZ", false);
  fWindowSizeZCmd->SetRange("WindowZ>0.");
  fWindowSizeZCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWindowSizeZCmd->SetToBeBroadcasted(false);
  fGasMatCmd = new G4UIcmdWithAString("/MySimulation/det/setGasMaterial", this);
  fGasMatCmd->SetGuidance("Select Material of the Gas.");
  fGasMatCmd->SetParameterName("choice", false);
  fGasMatCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

  fGasSizeXCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setGasX", this);
  fGasSizeXCmd->SetUnitCategory("Length");
  fGasSizeXCmd->SetParameterName("GasX", false);
  fGasSizeXCmd->SetRange("GasX>0.");
  fGasSizeXCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fGasSizeXCmd->SetToBeBroadcasted(false);

  fGasSizeYCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setGasY", this);
  fGasSizeYCmd->SetUnitCategory("Length");
  fGasSizeYCmd->SetParameterName("GasY", false);
  fGasSizeYCmd->SetRange("GasY>0.");
  fGasSizeYCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fGasSizeYCmd->SetToBeBroadcasted(false);

  fGasSizeZCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setGasZ", this);
  fGasSizeZCmd->SetUnitCategory("Length");
  fGasSizeZCmd->SetParameterName("GasZ", false);
  fGasSizeZCmd->SetRange("GasZ>0.");
  fGasSizeZCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fGasSizeZCmd->SetToBeBroadcasted(false);
 

  fUpdateCmd = new G4UIcmdWithoutParameter("/MySimulation/det/update", this);
  fUpdateCmd->SetGuidance("Update calorimeter geometry.");
  fUpdateCmd->SetGuidance("This command MUST be applied before \"beamOn\" ");
  fUpdateCmd->SetGuidance("if you changed geometrical value(s).");
  fUpdateCmd->AvailableForStates(G4State_Idle);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyDetectorMessenger::~MyDetectorMessenger()
{
  delete fWorldSizeZCmd; 
  delete fWorldSizeYCmd;
  delete fWorldSizeXCmd; 
  delete fWorldMatCmd; 
  delete fWindowSizeZCmd; 
  delete fWindowSizeYCmd;
  delete fWindowSizeXCmd; 
  delete fWindowMatCmd; 
  delete fGasSizeZCmd; 
  delete fGasSizeYCmd;
  delete fGasSizeXCmd; 
  delete fGasMatCmd; 


  delete fUpdateCmd;
  delete fDetDirectory;
  delete fMyDirectory;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyDetectorMessenger::SetNewValue(G4UIcommand *command, G4String newValue)
{
  if (verbose)
    G4cout << "void MyDetectorMessenger::SetNewValue(G4UIcommand* command,G4String newValue)" << G4endl;

  if (command == fWorldSizeXCmd)
    fDetectorConstruction->SetWorldSizeHalfX(0.5*fWorldSizeXCmd->GetNewDoubleValue(newValue));
  if (command == fWorldSizeYCmd)
    fDetectorConstruction->SetWorldSizeHalfY(0.5*fWorldSizeYCmd->GetNewDoubleValue(newValue));
  if (command == fWorldSizeZCmd)
    fDetectorConstruction->SetWorldSizeHalfZ(0.5*fWorldSizeZCmd->GetNewDoubleValue(newValue));
  if (command == fWorldMatCmd)
    fDetectorConstruction->SetMaterial(WORLD, newValue);
  if (command == fWindowSizeXCmd)
    fDetectorConstruction->SetWindowSizeHalfX(0.5*fWindowSizeXCmd->GetNewDoubleValue(newValue));
  if (command == fWindowSizeYCmd)
    fDetectorConstruction->SetWindowSizeHalfY(0.5*fWindowSizeYCmd->GetNewDoubleValue(newValue));
  if (command == fWindowSizeZCmd)
    fDetectorConstruction->SetWindowSizeHalfZ(0.5*fWindowSizeZCmd->GetNewDoubleValue(newValue));
  if (command == fWindowMatCmd)
    fDetectorConstruction->SetMaterial(WINDOW, newValue);
  if (command == fGasSizeXCmd)
    fDetectorConstruction->SetGasSizeHalfX(0.5*fGasSizeXCmd->GetNewDoubleValue(newValue));
  if (command == fGasSizeYCmd)
    fDetectorConstruction->SetGasSizeHalfY(0.5*fGasSizeYCmd->GetNewDoubleValue(newValue));
  if (command == fGasSizeZCmd)
    fDetectorConstruction->SetGasSizeHalfZ(0.5*fGasSizeZCmd->GetNewDoubleValue(newValue));
  if (command == fGasMatCmd)
    fDetectorConstruction->SetMaterial(GAS, newValue);


  if (command == fUpdateCmd)
    fDetectorConstruction->Update();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
